{"version":3,"sources":["pages/moodHome/constants.ts","pages/moodHome/emotionCarousel.tsx","pages/moodHome/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EMOTIONS","happy","text","color","loved","excited","sad","thankful","crazy","positive","relaxed","tired","EMOTIONS_ARR","EmotionCarousel","changeActiveEmotion","useState","active","setActive","start","setStart","colorTimer","setColorTimer","textTimer","setTextTimer","useEffect","Grid","item","xs","container","justify","alignItems","style","cursor","pointerEvents","width","height","border","borderRadius","display","justifyContent","onClick","clearTimeout","setTimeout","paddingLeft","fill","Fade","in","margin","textAlign","fontSize","length","React","memo","MoodHome","activeEmo","setActiveEmo","drawerOpen","setDrawerOpen","prevBgColor","setPrevBgColor","emoColorTimer","setEmoColorTimer","videoId","setVideoID","loading","setLoading","getVideoId","a","fetch","response","json","data","id","background","timeout","backgroundImage","position","zIndex","fontFamily","Button","variant","Drawer","anchor","open","onClose","Card","padding","marginBottom","minHeight","top","left","transform","opts","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b6045a8.chunk.js","sourcesContent":["const EMOTIONS = {\n    happy: {\n        text: 'happy',\n        color: 'linear-gradient(to right top, #051937, #004d7a, #008793, #00bf72, #a8eb12)',\n    },\n    loved: {\n        text: 'loved',\n        color: 'linear-gradient(to right top, #3d3438, #6e3549, #a02e4c, #d01d42, #fa0d28)'\n    },\n    excited: {\n        text: 'excited',\n        color: 'linear-gradient(to right top, #444d9c, #0083d3, #00b5d7, #00dfaa, #a4ff6b)'\n    },\n    sad: {\n        text: 'sad',\n        color: 'linear-gradient(to right top, #191a27, #25252f, #313138, #3e3d41, #4a4a4a)'\n    },\n    thankful: {\n        text: 'thankful',\n        color: 'linear-gradient(to right top, #22265d, #57256a, #891a69, #b30859, #d2203e)'\n    },\n    crazy: {\n        text: 'crazy',\n        color: 'linear-gradient(30deg, rgba(0,53,89,1) 0%, rgba(219,0,0,1) 100%)'\n    },\n    positive: {\n        text: 'positive',\n        color: 'linear-gradient(30deg, rgba(55,131,42,1) 0%, rgba(224,255,131,1) 100%)'\n    },\n    relaxed: {\n        text: 'relaxed',\n        color: 'linear-gradient(30deg, rgba(33,30,66,1) 0%, rgba(255,189,193,1) 100%)'\n    },\n    tired: {\n        text: 'tired',\n        color: 'linear-gradient(30deg, rgba(13,9,9,1) 0%, rgba(191,118,56,1) 100%)'\n    },\n}\nconst EMOTIONS_ARR = [EMOTIONS.crazy, EMOTIONS.excited, EMOTIONS.happy, EMOTIONS.loved, EMOTIONS.positive, EMOTIONS.relaxed, EMOTIONS.sad, EMOTIONS.thankful, EMOTIONS.tired]\n\nexport {\n    EMOTIONS,\n    EMOTIONS_ARR\n}","import React, { useEffect, useState } from 'react'\n\nimport { Fade, Grid } from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos'\n\nimport { EMOTIONS_ARR } from './constants'\n\nconst EmotionCarousel = ({changeActiveEmotion}: any) => {\n    const [active, setActive] = useState(0)\n    const [start, setStart] = useState(true)\n    const [colorTimer, setColorTimer] = useState(null)\n    const [textTimer, setTextTimer] = useState(null)\n    useEffect(() => {\n        changeActiveEmotion(EMOTIONS_ARR[active])\n    }, [])\n    const onBackClick = () => {\n        if (active > 0) {\n            setStart(false)\n            changeActiveEmotion({text: '', color: ''})\n            if (colorTimer) {\n                clearTimeout(colorTimer as any)\n            }\n            if (textTimer) {\n                clearTimeout(textTimer as any)\n            }\n            setColorTimer(setTimeout(() => {\n                setColorTimer(null)\n                changeActiveEmotion(EMOTIONS_ARR[active - 1])\n            }, 500) as any)\n            setTextTimer(setTimeout(() => {\n                setTextTimer(null)\n                setActive(active - 1)\n                setStart(true)\n            }, 1000) as any)\n        } \n    }\n    const onForwardClick = () => {\n        if (active < (EMOTIONS_ARR.length - 1)) {\n            setStart(false)\n            changeActiveEmotion({text: '', color: ''})\n            if (colorTimer) {\n                clearTimeout(colorTimer as any)\n            }\n            if (textTimer) {\n                clearTimeout(textTimer as any)\n            }\n            setColorTimer(setTimeout(() => {\n                setColorTimer(null)\n                changeActiveEmotion(EMOTIONS_ARR[active + 1])\n            }, 500) as any)\n            setTextTimer(setTimeout(() => {\n                setTextTimer(null)\n                setActive(active + 1)\n                setStart(true)\n            }, 1000) as any)\n        }\n    }\n    return <Grid item xs={12} container justify='center' alignItems='center'>\n        <div style={{\n            cursor: 'pointer',\n            pointerEvents: `${textTimer ? 'none' : 'unset'}`,\n            width: 50,\n            height: 50,\n            border: '1px solid white',\n            borderRadius: 30,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        }} onClick={onBackClick}>\n        <ArrowBackIosIcon style={{\n            width: 20,\n            paddingLeft: 7,\n            fill: 'white',\n        }} />\n        </div>\n        <Fade in={start}>\n        <p style={{\n            width: 200,\n            margin: 10,\n            textAlign: 'center',\n            fontSize: 35,\n            color: 'cyan',\n        }}>{EMOTIONS_ARR[active].text}</p>\n        </Fade>\n        <div style={{\n            cursor: 'pointer',\n            pointerEvents: `${textTimer ? 'none' : 'unset'}`,\n            width: 50,\n            height: 50,\n            border: '1px solid white',\n            borderRadius: 30,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }} onClick={onForwardClick}>\n        <ArrowForwardIosIcon style={{\n            width: 20,\n            fill: 'white',\n        }} />\n        </div>\n    </Grid>\n}\n\nexport default React.memo(EmotionCarousel)","import React, { useEffect, useState } from 'react'\nimport YouTube from 'react-youtube'\n\nimport { Button, Card, Drawer, Fade, Grid } from '@material-ui/core'\n\nimport EmotionCarousel from './emotionCarousel'\n\nconst MoodHome = () => {\n    const [activeEmo, setActiveEmo] = useState({ text: '', color: null})\n    const [drawerOpen, setDrawerOpen] = useState(false)\n    const [prevBgColor, setPrevBgColor] = useState('')\n    const [emoColorTimer, setEmoColorTimer] = useState(null)\n    const [videoId, setVideoID] = useState('')\n    const [loading, setLoading] = useState(false)\n    useEffect(() => {\n        if (activeEmo.text) {\n            if (emoColorTimer) {\n                clearTimeout(emoColorTimer as any)\n            }\n            setEmoColorTimer(setTimeout(() => {\n                setEmoColorTimer(null)\n                setPrevBgColor(activeEmo.color || '')\n            }, 500) as any)\n        }\n    }, [activeEmo])\n    const handleSwoosh = () => {\n        setDrawerOpen(true)\n        getVideoId()\n    }\n    const getVideoId = async () => {\n        setLoading(true)\n        const response = await fetch(`https://script.google.com/macros/s/AKfycbx5FRI9qXSnQrsH_eU0c6OiBQqIUjg5N4m5f966jTWqu5VNiPQYIMd0OmOiqlNfzH3_zA/exec?emo=${activeEmo.text}`)\n        const data = await response.json()\n        if (data?.id) {\n            setVideoID(data.id)\n            setLoading(false)\n        }\n    }\n    return <Grid style={{\n        height: '100vh',\n        background: prevBgColor //'linear-gradient(to right top, #070707, #191919, #262626, #343434, #434343)'\n    }} container justify='center' alignItems='center'>\n        <Fade timeout={500} in={!!activeEmo.text}><div style={{\n            backgroundImage: activeEmo?.color || '',\n            width: '100%',\n            height: '100%',\n            position: 'absolute'\n        }}></div></Fade>\n        <Grid style={{\n            height: '70vh',\n            zIndex: 1\n        }} item container alignItems='center' justify='center' xs={12}>\n            <h1 style={{\n                fontFamily: `'Oleo Script', cursive`,\n                color: 'white',\n                fontSize: 50\n            }}>Mood Board</h1>\n            <Grid item container xs={12}>\n                <EmotionCarousel changeActiveEmotion={setActiveEmo} />\n            </Grid>\n            <Button onClick={handleSwoosh} style={{\n                    border: '1px solid white',\n                    borderRadius: 30,\n                    color: 'white',\n            }} variant=\"outlined\">\n                    Swoosh!\n                </Button>\n        </Grid>\n        <Drawer anchor='bottom' open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n            <Grid item container justify='center' xs={12}>\n            <Card style={{\n                height: '100vh',\n                width: '100%',\n                padding: 10\n            }}>\n                <Grid item container justify='center' xs={12}>\n                <Button style={{\n                    border: '1px solid black',\n                    borderRadius: 30,\n                    marginBottom: 10\n            }} variant=\"outlined\" onClick={() => setDrawerOpen(false)}>Close</Button>\n                </Grid>\n                <Grid style={{\n                    minHeight: '400px',\n                    position: 'relative'\n                }} item xs={12}>\n                {\n                    loading === true && <p style={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                    }}> Creating your moodboard...</p> || <YouTube videoId={videoId} opts={{\n                        width: '100%',\n                        height: '700px'\n                    }} />\n                }\n                </Grid>\n                </Card>\n            </Grid>\n        </Drawer>\n    </Grid>\n}\n\nexport default React.memo(MoodHome)","import React from 'react'\n\nimport MoodHome from './pages/moodHome'\n\nfunction App() {\n  return (\n    <MoodHome />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}